<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+AAAApQAAAM8AAADtAAAA6wAA
        AM8AAACTAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAAAywAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAoQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMgAAAPcAAAD/AAAA/wAA
        APUAAAA8AAAAAAAAAAAAAABAAAAA8wAAAP8AAAD/AAAAzwAAAA4AAAAAAAAAYgAAAHAAAABqAAAAagAA
        AGoAAABqAAAAagAAAGoAAABqAAAAagAAAHgAAABWAAAAAAAAAAAAAAAAAAAAAAAAABIAAADpAAAA/wAA
        AP8AAAD/AAAALgAAAAAAAAB4AAAAegAAAAAAAAA0AAAA/wAAAP8AAAD/AAAAwQAAAAAAAADzAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANcAAAAAAAAAAAAAAAAAAAAAAAAAsQAA
        AP8AAAD/AAAA/wAAALMAAAAAAAAAuQAAAP8AAAD/AAAAtwAAAAAAAACrAAAA/wAAAP8AAAD/AAAAlwAA
        AP8AAAD7AAAAZgAAAGQAAABqAAAAagAAAGoAAABqAAAAagAAAGoAAAB4AAAAVgAAAAAAAAAAAAAAAAAA
        ABAAAADzAAAA/wAAAP8AAAD/AAAAjQAAAAAAAADtAAAA/wAAAP8AAADzAAAAAAAAAIkAAAD/AAAA/wAA
        AP8AAADlAAAA/wAAAOcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAHoAAAD/AAAA/wAAAP8AAADDAAAAAAAAAKEAAAD/AAAA/wAAAKUAAAAAAAAAwwAA
        AP8AAAD/AAAA/wAAAHwAAAD/AAAA6wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKUAAAD/AAAA/wAAAP8AAABoAAAAAAAAADgAAAA6AAAAAAAA
        AGYAAAD/AAAA/wAAAP8AAAClAAAAAAAAAP8AAADrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJkAAAD/AAAA/wAAAP8AAACNAAAAGgAA
        ABoAAACJAAAA/wAAAP8AAAD/AAAAoQAAAAAAAAAAAAAA/wAAAOsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF4AAAD1AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA9QAAAGYAAAAAAAAAAAAAAAAAAAD/AAAA6wAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAQAAABeAAAAsQAAANkAAADXAAAAsQAAAF4AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADrAAAAAAAA
        AAAAAAAAAAAAAAAAAAwAAABiAAAAPAAAAAAAAAAAAAAAAAAAADwAAABiAAAADAAAAAAAAAAAAAAAFgAA
        AGoAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAA
        AOsAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAP8AAAC7AAAAAAAAAAAAAAAAAAAAuwAAAP8AAAAoAAAAAAAA
        AAAAAABCAAAA/wAAAJcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAD/AAAA6wAAAAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAAALkAAAAAAAAAAAAAAAAAAAC5AAAA/wAA
        ACgAAAAAAAAAAAAAAEIAAAD/AAAAlQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAP8AAADrAAAAAAAAAAAAAAAAAAAAAAAAACgAAAD/AAAAuQAAAAAAAAAAAAAAAAAA
        ALkAAAD/AAAAKAAAAAAAAAAAAAAAQgAAAP8AAACTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAAAOsAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAP8AAAC5AAAAAAAA
        AAAAAAAAAAAAuQAAAP8AAAAoAAAAAAAAAAAAAABCAAAA/wAAAJMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA6wAAAAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAA
        ALkAAAAAAAAAAAAAAAAAAAC5AAAA/wAAACgAAAAAAAAAAAAAAEIAAAD/AAAAkwAAAAAAAAAAAAAAAAAA
        AAAAAABEAAAAvQAAADIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADrAAAAAAAAAAAAAAAAAAAAAAAA
        ACgAAAD/AAAAuQAAAAAAAAAAAAAAAAAAALkAAAD/AAAAKAAAAAAAAAAAAAAAQgAAAP8AAACXAAAAAAAA
        AAAAAAAAAAAAAAAAAH4AAAD/AAAAXgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAAAOsAAAAAAAAAAAAA
        AAAAAAAAAAAAKAAAAP8AAAC5AAAAAAAAAAAAAAAAAAAAuQAAAP8AAAAoAAAAAAAAAAAAAAAoAAAAwQAA
        AFYAAAAAAAAAAAAAAAAAAAAAAAAAegAAAP8AAABaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA6wAA
        AAAAAAAAAAAAAAAAAAAAAAAoAAAA/wAAALkAAAAAAAAAAAAAAAAAAAC7AAAA/wAAACgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB6AAAA/wAAAFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AP8AAADrAAAAAAAAAAAAAAAAAAAAAAAAACgAAAD/AAAAuQAAAAAAAAAAAAAAAAAAAB4AAAAuAAAABgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHoAAAD/AAAAWgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAA/wAAAOsAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAP8AAAC7AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAegAAAP8AAABaAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAD/AAAA6wAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAfAAAAEwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB6AAAA/wAA
        AFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAADrAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AHoAAAD/AAAAWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAAAOkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAegAAAP8AAABaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD1AAAA/wAAAOsAAADrAAAA6wAA
        AOsAAADrAAAA6wAAAOsAAADrAAAA6wAAAOsAAADrAAAA6wAAAOsAAADrAAAA6wAAAOsAAADrAAAA6wAA
        AOsAAADrAAAA6wAAAOcAAAD5AAAA/wAAAFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOMAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP0AAAD/AAAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////gf///gB///w8P//4fhAA8EID//BCA//4QhP/+H4T//
        wYM///APP//8Pz////8+c8//PnPP/z5zz/8+c8//PnPPvz5zz78+c9+/PnP/vz5//78+f/+/P///vz//
        /78///+/AAAAPwAAAD////////////////8=
</value>
  </data>
</root>